{"ast":null,"code":"var _jsxFileName = \"/Users/clayreimus/Documents/api_directory/src/App.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchAllModsList, fetchMoreInformation } from './api.tsx';\nimport './App.css';\nconst ModsType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  _links: PropTypes.shape({\n    self: PropTypes.string.isRequired,\n    git: PropTypes.string.isRequired,\n    html: PropTypes.string.isRequired\n  })\n});\n\nconst ModsRow = ({\n  mods,\n  onClick\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"tr\", {\n  key: mods.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }\n}, mods.name), /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }\n}, mods.type), /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"button\", {\n  onClick: () => onClick(mods),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }\n}, \"More Information\"))));\n\nModsRow.propTypes = {\n  mods: PropTypes.arrayOf(ModsType)\n};\n\nconst ModsInfo = ({\n  name,\n  _links\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }\n}, name), /*#__PURE__*/React.createElement(\"table\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"tbody\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 7\n  }\n}, Object.keys(_links).map(key => /*#__PURE__*/React.createElement(\"tr\", {\n  key: key,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 13\n  }\n}, key), /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }\n}, _links[key]), /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 13\n  }\n}, \"fetchMoreInformation\"))))));\n\nModsInfo.propTypes = ModsType;\n\nfunction App() {\n  const [mods, setMods] = React.useState([]);\n  const [selectedMods, selectedModsSet] = React.useState(null);\n  React.useEffect(() => {\n    fetchAllModsList().then(allModsListData => {\n      setMods(allModsListData);\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: 'auto',\n      width: 800,\n      paddingTop: '1em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Roll20 Mods Directory\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: '80% 20%',\n      gridColumnGap: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, mods.map(mods => /*#__PURE__*/React.createElement(ModsRow, {\n    mods: mods,\n    onClick: mods => {\n      selectedModsSet(mods);\n      fetchMoreInformation(mods);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }))))), selectedMods && /*#__PURE__*/React.createElement(ModsInfo, Object.assign({}, selectedMods, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 26\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/clayreimus/Documents/api_directory/src/App.js"],"names":["React","PropTypes","fetchAllModsList","fetchMoreInformation","ModsType","shape","id","string","isRequired","name","_links","self","git","html","ModsRow","mods","onClick","type","propTypes","arrayOf","ModsInfo","Object","keys","map","key","App","setMods","useState","selectedMods","selectedModsSet","useEffect","then","allModsListData","margin","width","paddingTop","display","gridTemplateColumns","gridColumnGap"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { fetchAllModsList, fetchMoreInformation } from './api.tsx'\n\nimport './App.css'\n\nconst ModsType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  _links: PropTypes.shape({\n    self: PropTypes.string.isRequired,\n    git: PropTypes.string.isRequired,\n    html: PropTypes.string.isRequired,\n  }),\n})\n\nconst ModsRow = ({ mods, onClick }) => (\n  <>\n    <tr key={mods.id}>\n      <td>{mods.name}</td>\n      <td>{mods.type}</td>\n      <td>\n        <button onClick={() => onClick(mods)}>More Information</button>\n      </td>\n    </tr>\n  </>\n)\n\nModsRow.propTypes = {\n  mods: PropTypes.arrayOf(ModsType),\n}\n\nconst ModsInfo = ({ name, _links }) => (\n  <div>\n    <h2>{name}</h2>\n    <table>\n      <tbody>\n        {Object.keys(_links).map((key) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{_links[key]}</td>\n            <td>fetchMoreInformation</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n)\n\nModsInfo.propTypes = ModsType\n\nfunction App() {\n  const [mods, setMods] = React.useState([])\n  const [selectedMods, selectedModsSet] = React.useState(null)\n\n  React.useEffect(() => {\n    fetchAllModsList().then((allModsListData) => {\n      setMods(allModsListData)\n    })\n  })\n\n  return (\n    <div\n      style={{\n        margin: 'auto',\n        width: 800,\n        paddingTop: '1em',\n      }}\n    >\n      <h1 className=\"title\">Roll20 Mods Directory</h1>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '80% 20%',\n          gridColumnGap: '1rem',\n        }}\n      >\n        <div>\n          <table width=\"100%\">\n            <tbody>\n              {mods.map((mods) => (\n                <ModsRow\n                  mods={mods}\n                  onClick={(mods) => {\n                    selectedModsSet(mods)\n                    fetchMoreInformation(mods)\n                  }}\n                />\n              ))}\n            </tbody>\n          </table>\n        </div>\n        {selectedMods && <ModsInfo {...selectedMods} />}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}