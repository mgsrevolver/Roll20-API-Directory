{"ast":null,"code":"import { endpoint } from '@octokit/endpoint';\nimport { getUserAgent } from 'universal-user-agent';\nimport { isPlainObject } from 'is-plain-object';\nimport nodeFetch from 'node-fetch';\nimport { RequestError } from '@octokit/request-error';\nconst VERSION = \"5.6.3\";\n\nfunction getBufferResponse(response) {\n  return response.arrayBuffer();\n}\n\nfunction fetchWrapper(requestOptions) {\n  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;\n\n  if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {\n    requestOptions.body = JSON.stringify(requestOptions.body);\n  }\n\n  let headers = {};\n  let status;\n  let url;\n  const fetch = requestOptions.request && requestOptions.request.fetch || nodeFetch;\n  return fetch(requestOptions.url, Object.assign({\n    method: requestOptions.method,\n    body: requestOptions.body,\n    headers: requestOptions.headers,\n    redirect: requestOptions.redirect\n  }, // `requestOptions.request.agent` type is incompatible\n  // see https://github.com/octokit/types.ts/pull/264\n  requestOptions.request)).then(async response => {\n    url = response.url;\n    status = response.status;\n\n    for (const keyAndValue of response.headers) {\n      headers[keyAndValue[0]] = keyAndValue[1];\n    }\n\n    if (\"deprecation\" in headers) {\n      const matches = headers.link && headers.link.match(/<([^>]+)>; rel=\"deprecation\"/);\n      const deprecationLink = matches && matches.pop();\n      log.warn(`[@octokit/request] \"${requestOptions.method} ${requestOptions.url}\" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : \"\"}`);\n    }\n\n    if (status === 204 || status === 205) {\n      return;\n    } // GitHub API returns 200 for HEAD requests\n\n\n    if (requestOptions.method === \"HEAD\") {\n      if (status < 400) {\n        return;\n      }\n\n      throw new RequestError(response.statusText, status, {\n        response: {\n          url,\n          status,\n          headers,\n          data: undefined\n        },\n        request: requestOptions\n      });\n    }\n\n    if (status === 304) {\n      throw new RequestError(\"Not modified\", status, {\n        response: {\n          url,\n          status,\n          headers,\n          data: await getResponseData(response)\n        },\n        request: requestOptions\n      });\n    }\n\n    if (status >= 400) {\n      const data = await getResponseData(response);\n      const error = new RequestError(toErrorMessage(data), status, {\n        response: {\n          url,\n          status,\n          headers,\n          data\n        },\n        request: requestOptions\n      });\n      throw error;\n    }\n\n    return getResponseData(response);\n  }).then(data => {\n    return {\n      status,\n      url,\n      headers,\n      data\n    };\n  }).catch(error => {\n    if (error instanceof RequestError) throw error;\n    throw new RequestError(error.message, 500, {\n      request: requestOptions\n    });\n  });\n}\n\nasync function getResponseData(response) {\n  const contentType = response.headers.get(\"content-type\");\n\n  if (/application\\/json/.test(contentType)) {\n    return response.json();\n  }\n\n  if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n    return response.text();\n  }\n\n  return getBufferResponse(response);\n}\n\nfunction toErrorMessage(data) {\n  if (typeof data === \"string\") return data; // istanbul ignore else - just in case\n\n  if (\"message\" in data) {\n    if (Array.isArray(data.errors)) {\n      return `${data.message}: ${data.errors.map(JSON.stringify).join(\", \")}`;\n    }\n\n    return data.message;\n  } // istanbul ignore next - just in case\n\n\n  return `Unknown error: ${JSON.stringify(data)}`;\n}\n\nfunction withDefaults(oldEndpoint, newDefaults) {\n  const endpoint = oldEndpoint.defaults(newDefaults);\n\n  const newApi = function (route, parameters) {\n    const endpointOptions = endpoint.merge(route, parameters);\n\n    if (!endpointOptions.request || !endpointOptions.request.hook) {\n      return fetchWrapper(endpoint.parse(endpointOptions));\n    }\n\n    const request = (route, parameters) => {\n      return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));\n    };\n\n    Object.assign(request, {\n      endpoint,\n      defaults: withDefaults.bind(null, endpoint)\n    });\n    return endpointOptions.request.hook(request, endpointOptions);\n  };\n\n  return Object.assign(newApi, {\n    endpoint,\n    defaults: withDefaults.bind(null, endpoint)\n  });\n}\n\nconst request = withDefaults(endpoint, {\n  headers: {\n    \"user-agent\": `octokit-request.js/${VERSION} ${getUserAgent()}`\n  }\n});\nexport { request };","map":{"version":3,"sources":["../dist-src/version.js","../dist-src/get-buffer-response.js","../dist-src/fetch-wrapper.js","../dist-src/with-defaults.js","../dist-src/index.js"],"names":["getBuffer"],"mappings":"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","sourcesContent":["export const VERSION = \"5.6.3\";\n","export default function getBufferResponse(response) {\n    return response.arrayBuffer();\n}\n","import { isPlainObject } from \"is-plain-object\";\nimport nodeFetch from \"node-fetch\";\nimport { RequestError } from \"@octokit/request-error\";\nimport getBuffer from \"./get-buffer-response\";\nexport default function fetchWrapper(requestOptions) {\n    const log = requestOptions.request && requestOptions.request.log\n        ? requestOptions.request.log\n        : console;\n    if (isPlainObject(requestOptions.body) ||\n        Array.isArray(requestOptions.body)) {\n        requestOptions.body = JSON.stringify(requestOptions.body);\n    }\n    let headers = {};\n    let status;\n    let url;\n    const fetch = (requestOptions.request && requestOptions.request.fetch) || nodeFetch;\n    return fetch(requestOptions.url, Object.assign({\n        method: requestOptions.method,\n        body: requestOptions.body,\n        headers: requestOptions.headers,\n        redirect: requestOptions.redirect,\n    }, \n    // `requestOptions.request.agent` type is incompatible\n    // see https://github.com/octokit/types.ts/pull/264\n    requestOptions.request))\n        .then(async (response) => {\n        url = response.url;\n        status = response.status;\n        for (const keyAndValue of response.headers) {\n            headers[keyAndValue[0]] = keyAndValue[1];\n        }\n        if (\"deprecation\" in headers) {\n            const matches = headers.link && headers.link.match(/<([^>]+)>; rel=\"deprecation\"/);\n            const deprecationLink = matches && matches.pop();\n            log.warn(`[@octokit/request] \"${requestOptions.method} ${requestOptions.url}\" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : \"\"}`);\n        }\n        if (status === 204 || status === 205) {\n            return;\n        }\n        // GitHub API returns 200 for HEAD requests\n        if (requestOptions.method === \"HEAD\") {\n            if (status < 400) {\n                return;\n            }\n            throw new RequestError(response.statusText, status, {\n                response: {\n                    url,\n                    status,\n                    headers,\n                    data: undefined,\n                },\n                request: requestOptions,\n            });\n        }\n        if (status === 304) {\n            throw new RequestError(\"Not modified\", status, {\n                response: {\n                    url,\n                    status,\n                    headers,\n                    data: await getResponseData(response),\n                },\n                request: requestOptions,\n            });\n        }\n        if (status >= 400) {\n            const data = await getResponseData(response);\n            const error = new RequestError(toErrorMessage(data), status, {\n                response: {\n                    url,\n                    status,\n                    headers,\n                    data,\n                },\n                request: requestOptions,\n            });\n            throw error;\n        }\n        return getResponseData(response);\n    })\n        .then((data) => {\n        return {\n            status,\n            url,\n            headers,\n            data,\n        };\n    })\n        .catch((error) => {\n        if (error instanceof RequestError)\n            throw error;\n        throw new RequestError(error.message, 500, {\n            request: requestOptions,\n        });\n    });\n}\nasync function getResponseData(response) {\n    const contentType = response.headers.get(\"content-type\");\n    if (/application\\/json/.test(contentType)) {\n        return response.json();\n    }\n    if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n        return response.text();\n    }\n    return getBuffer(response);\n}\nfunction toErrorMessage(data) {\n    if (typeof data === \"string\")\n        return data;\n    // istanbul ignore else - just in case\n    if (\"message\" in data) {\n        if (Array.isArray(data.errors)) {\n            return `${data.message}: ${data.errors.map(JSON.stringify).join(\", \")}`;\n        }\n        return data.message;\n    }\n    // istanbul ignore next - just in case\n    return `Unknown error: ${JSON.stringify(data)}`;\n}\n","import fetchWrapper from \"./fetch-wrapper\";\nexport default function withDefaults(oldEndpoint, newDefaults) {\n    const endpoint = oldEndpoint.defaults(newDefaults);\n    const newApi = function (route, parameters) {\n        const endpointOptions = endpoint.merge(route, parameters);\n        if (!endpointOptions.request || !endpointOptions.request.hook) {\n            return fetchWrapper(endpoint.parse(endpointOptions));\n        }\n        const request = (route, parameters) => {\n            return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));\n        };\n        Object.assign(request, {\n            endpoint,\n            defaults: withDefaults.bind(null, endpoint),\n        });\n        return endpointOptions.request.hook(request, endpointOptions);\n    };\n    return Object.assign(newApi, {\n        endpoint,\n        defaults: withDefaults.bind(null, endpoint),\n    });\n}\n","import { endpoint } from \"@octokit/endpoint\";\nimport { getUserAgent } from \"universal-user-agent\";\nimport { VERSION } from \"./version\";\nimport withDefaults from \"./with-defaults\";\nexport const request = withDefaults(endpoint, {\n    headers: {\n        \"user-agent\": `octokit-request.js/${VERSION} ${getUserAgent()}`,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}