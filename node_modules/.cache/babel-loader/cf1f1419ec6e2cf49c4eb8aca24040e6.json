{"ast":null,"code":"var _jsxFileName = \"/Users/clayreimus/Documents/api_directory/src/App.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nconst APIkey = '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';\nconst allModsURL = 'https://api.github.com/repos/Roll20/roll20-api-scripts/contents/';\nconst ModsType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.shape({\n    english: PropTypes.string.isRequired,\n    japanese: PropTypes.string.isRequired,\n    chinese: PropTypes.string.isRequired,\n    french: PropTypes.string.isRequired\n  }),\n  type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    'Sp. Attack': PropTypes.number.isRequired,\n    'Sp. Defense': PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired\n  })\n});\n\nconst ModsRow = ({\n  mods,\n  onClick\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"tr\", {\n  key: mods.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }\n}, mods.name), /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"button\", {\n  onClick: () => onClick(mods),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }\n}, \"More Information\"))));\n\nModsRow.propTypes = {\n  mods: PropTypes.arrayOf(ModsType)\n};\n\nconst ModsInfo = ({\n  name,\n  _links\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }\n}, name), /*#__PURE__*/React.createElement(\"table\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"tbody\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }\n}, Object.keys(_links).map(key => /*#__PURE__*/React.createElement(\"tr\", {\n  key: key,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 13\n  }\n}, key), /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 13\n  }\n}, _links[key]))))));\n\nModsInfo.propTypes = ModsType;\n\nfunction App() {\n  const [mods, setMods] = React.useState([]);\n  const [selectedMods, selectedModsSet] = React.useState(null);\n  React.useEffect(() => {\n    fetch(allModsURL, {\n      method: 'GET',\n      headers: {\n        Authorization: APIkey\n      }\n    }).then(res => res.json()).then(data => setMods(data));\n  }, []);\n\n  const getMoreInfo = ({\n    mods\n  }) => {\n    this.setState({\n      modName: mods.value\n    }, () => {\n      fetch(`https://api.github.com/repositories/28607958/contents/${this.state.modName}/README.md`, {\n        method: 'GET',\n        headers: {\n          Authorization: APIkey\n        }\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: 'auto',\n      width: 800,\n      paddingTop: '1em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Roll20 Mods Directory\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: '80% 20%',\n      gridColumnGap: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, mods.map(mods => /*#__PURE__*/React.createElement(ModsRow, {\n    mods: mods,\n    onClick: mods => {\n      selectedModsSet(mods);\n      getMoreInfo(mods);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }))))), selectedMods && /*#__PURE__*/React.createElement(ModsInfo, Object.assign({}, selectedMods, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 26\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/clayreimus/Documents/api_directory/src/App.js"],"names":["React","PropTypes","APIkey","allModsURL","ModsType","shape","id","string","isRequired","name","english","japanese","chinese","french","type","arrayOf","base","HP","number","Attack","Defense","Speed","ModsRow","mods","onClick","propTypes","ModsInfo","_links","Object","keys","map","key","App","setMods","useState","selectedMods","selectedModsSet","useEffect","fetch","method","headers","Authorization","then","res","json","data","getMoreInfo","setState","modName","value","state","response","console","log","margin","width","paddingTop","display","gridTemplateColumns","gridColumnGap"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './App.css'\n\nconst APIkey = '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'\nconst allModsURL =\n  'https://api.github.com/repos/Roll20/roll20-api-scripts/contents/'\n\nconst ModsType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.shape({\n    english: PropTypes.string.isRequired,\n    japanese: PropTypes.string.isRequired,\n    chinese: PropTypes.string.isRequired,\n    french: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    'Sp. Attack': PropTypes.number.isRequired,\n    'Sp. Defense': PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  }),\n})\n\nconst ModsRow = ({ mods, onClick }) => (\n  <>\n    <tr key={mods.id}>\n      <td>{mods.name}</td>\n      <td></td>\n      <td>\n        <button onClick={() => onClick(mods)}>More Information</button>\n      </td>\n    </tr>\n  </>\n)\n\nModsRow.propTypes = {\n  mods: PropTypes.arrayOf(ModsType),\n}\n\nconst ModsInfo = ({ name, _links }) => (\n  <div>\n    <h2>{name}</h2>\n    <table>\n      <tbody>\n        {Object.keys(_links).map((key) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{_links[key]}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n)\n\nModsInfo.propTypes = ModsType\n\nfunction App() {\n  const [mods, setMods] = React.useState([])\n  const [selectedMods, selectedModsSet] = React.useState(null)\n\n  React.useEffect(() => {\n    fetch(allModsURL, {\n      method: 'GET',\n      headers: {\n        Authorization: APIkey,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => setMods(data))\n  }, [])\n\n  const getMoreInfo = ({ mods }) => {\n    this.setState(\n      {\n        modName: mods.value,\n      },\n      () => {\n        fetch(\n          `https://api.github.com/repositories/28607958/contents/${this.state.modName}/README.md`,\n          {\n            method: 'GET',\n            headers: {\n              Authorization: APIkey,\n            },\n          }\n        )\n          .then((response) => response.json())\n          .then((data) => {\n            console.log(data)\n          })\n      }\n    )\n  }\n\n  return (\n    <div\n      style={{\n        margin: 'auto',\n        width: 800,\n        paddingTop: '1em',\n      }}\n    >\n      <h1 className=\"title\">Roll20 Mods Directory</h1>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '80% 20%',\n          gridColumnGap: '1rem',\n        }}\n      >\n        <div>\n          <table width=\"100%\">\n            <tbody>\n              {mods.map((mods) => (\n                <ModsRow\n                  mods={mods}\n                  onClick={(mods) => {\n                    selectedModsSet(mods)\n                    getMoreInfo(mods)\n                  }}\n                />\n              ))}\n            </tbody>\n          </table>\n        </div>\n        {selectedMods && <ModsInfo {...selectedMods} />}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}