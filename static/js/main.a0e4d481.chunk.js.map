{"version":3,"sources":["api.tsx","App.js","serviceWorker.js","index.js"],"names":["APIkey","allModsURL","fetch","method","headers","Authorization","res","json","allModsListData","ModsRow","mods","onClick","key","id","name","type","ModsInfo","_links","Object","keys","map","App","React","useState","setMods","selectedMods","selectedModsSet","useEffect","fetchAllModsList","then","style","margin","width","paddingTop","className","display","gridTemplateColumns","gridColumnGap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":";4iNAAA,IAAMA,EAAS,2CACTC,EACJ,mE,4CAWK,sGACaC,MAAMD,EAAY,CAClCE,OAAQ,MACRC,QAAS,CACPC,cAAeL,KAJd,cACCM,EADD,gBAQsCA,EAAIC,OAR1C,cAQCC,EARD,yBASEA,GATF,4C,gCCGDC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OACd,oCACE,wBAAIC,IAAKF,EAAKG,IACZ,4BAAKH,EAAKI,MACV,4BAAKJ,EAAKK,MACV,4BACE,4BAAQJ,QAAS,kBAAMA,EAAQD,KAA/B,wBAUFM,EAAW,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAMG,EAAT,EAASA,OAAT,OACf,6BACE,4BAAKH,GACL,+BACE,+BACGI,OAAOC,KAAKF,GAAQG,KAAI,SAACR,GAAD,OACvB,wBAAIA,IAAKA,GACP,4BAAKA,GACL,4BAAKK,EAAOL,YAwDTS,MA9Cf,WACE,MAAwBC,IAAMC,SAAS,IAAvC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAAwCF,IAAMC,SAAS,MAAvD,mBAAOE,EAAP,KAAqBC,EAArB,KAQA,OANAJ,IAAMK,WAAU,YDzCX,WAAP,gCC0CIC,GAAmBC,MAAK,SAACrB,GACvBgB,EAAQhB,QAET,IAGD,yBACEsB,MAAO,CACLC,OAAQ,OACRC,MAAO,IACPC,WAAY,QAGd,wBAAIC,UAAU,SAAd,yBACA,yBACEJ,MAAO,CACLK,QAAS,OACTC,oBAAqB,UACrBC,cAAe,SAGjB,6BACE,2BAAOL,MAAM,QACX,+BACGtB,EAAKU,KAAI,SAACV,GAAD,OACR,kBAAC,EAAD,CACEA,KAAMA,EACNC,QAAS,SAACD,GACRgB,EAAgBhB,YAO3Be,GAAgB,kBAAC,EAAaA,MC9EnBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a0e4d481.chunk.js","sourcesContent":["const APIkey = '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'\nconst allModsURL =\n  'https://api.github.com/repos/Roll20/roll20-api-scripts/contents/'\n\nexport interface AllModsList {\n  name: string\n  type: string\n}\n\nexport interface MoreInformation {\n  content: string\n}\n\nexport async function fetchAllModsList(): Promise<AllModsList> {\n  const res = await fetch(allModsURL, {\n    method: 'GET',\n    headers: {\n      Authorization: APIkey,\n    },\n  })\n\n  const allModsListData: AllModsList = await res.json()\n  return allModsListData\n}\n\nexport async function fetchMoreInformation(\n  mod: string\n): Promise<MoreInformation> {\n  const res = await fetch(\n    `https://api.github.com/repositories/28607958/contents/${mod}/README.md`,\n    {\n      method: 'GET',\n      headers: {\n        Authorization: APIkey,\n      },\n    }\n  )\n\n  const moreInfoData: MoreInformation = await res.json()\n  return moreInfoData\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { fetchAllModsList, fetchMoreInformation } from './api'\n\nimport './App.css'\n\nconst ModsType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  _links: PropTypes.shape({\n    self: PropTypes.string.isRequired,\n    git: PropTypes.string.isRequired,\n    html: PropTypes.string.isRequired,\n  }),\n})\n\nconst ModsRow = ({ mods, onClick }) => (\n  <>\n    <tr key={mods.id}>\n      <td>{mods.name}</td>\n      <td>{mods.type}</td>\n      <td>\n        <button onClick={() => onClick(mods)}>More Information</button>\n      </td>\n    </tr>\n  </>\n)\n\nModsRow.propTypes = {\n  mods: PropTypes.arrayOf(ModsType),\n}\n\nconst ModsInfo = ({ name, _links }) => (\n  <div>\n    <h2>{name}</h2>\n    <table>\n      <tbody>\n        {Object.keys(_links).map((key) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{_links[key]}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n)\n\nModsInfo.propTypes = ModsType\n\nfunction App() {\n  const [mods, setMods] = React.useState([])\n  const [selectedMods, selectedModsSet] = React.useState(null)\n\n  React.useEffect(() => {\n    fetchAllModsList().then((allModsListData) => {\n      setMods(allModsListData)\n    })\n  }, [])\n\n  return (\n    <div\n      style={{\n        margin: 'auto',\n        width: 800,\n        paddingTop: '1em',\n      }}\n    >\n      <h1 className=\"title\">Roll20 Mods Directory</h1>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '80% 20%',\n          gridColumnGap: '1rem',\n        }}\n      >\n        <div>\n          <table width=\"100%\">\n            <tbody>\n              {mods.map((mods) => (\n                <ModsRow\n                  mods={mods}\n                  onClick={(mods) => {\n                    selectedModsSet(mods)\n                  }}\n                />\n              ))}\n            </tbody>\n          </table>\n        </div>\n        {selectedMods && <ModsInfo {...selectedMods} />}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}